#!perl
=head1 NAME

  Osbb managment module

=cut


use strict;
use warnings FATAL => 'all';

use Osbb::db::Osbb;
use Abills::Base qw(cmd convert _bp mk_unique_value sendmail encode_base64 load_pmodule);
use Abills::Filters qw(human_exp);
use JSON;
use Users;
use Multidoms;
use Address;
use Payments;

use Abills::Experimental;

our (
  %lang,
  $html,
  $admin,
  $users,
  $db,
  %conf,
  %permissions,
  %ADMIN_REPORT,
  %err_strs,
  @MONTHES,
);

my $Osbb = Osbb->new($db, $admin, \%conf);
my $User = Users->new($db, $admin, \%conf);
my $Address = Address->new($db, $admin, \%conf);

if ( form_purchase_module({
  HEADER          => $users->{UID},
  MODULE          => 'Multidoms',
  REQUIRE_VERSION => 1.06
}) ) {
  exit;
}

#our %space_type = (
#  0  => '',
#  1  => $lang{COMMERCIAL}
#);

require Osbb::User_portal;
#require Osbb::Quick_reports;

if ( $permissions{3} ) {
  require Osbb::Reports;
}

if ( $permissions{4} ) {
  require Osbb::Configure;
  require Osbb::Import;
  require Osbb::Tarifs;
  require Osbb::Accounting;
  require Osbb::Receipts;
}

if ( %ADMIN_REPORT ) {
  require Osbb::Periodic;
}


#**********************************************************
=head2 osbb_user($attr)

=cut
#**********************************************************
sub osbb_user {
  return 0 unless ( $FORM{UID} );
  
  my $tp_info = $Osbb->user_info($FORM{UID});
  _error_show($Osbb);
  
  my %TEMPLATE_ARGS = %{$tp_info};
  
  if ( $FORM{add} ) {
    $Osbb->user_add({ %FORM });
    show_result($Osbb, $lang{ADDED});
  }
  elsif ( $FORM{change} ) {
    $Osbb->user_change({ %FORM });
    show_result($Osbb, $lang{CHANGED});
  }
  elsif ( $FORM{del} && $FORM{COMMENTS} ) {
    $Osbb->user_del({ ID => $FORM{del}, COMMENTS => $FORM{COMMENTS} });
    show_result($Osbb, $lang{DELETED});
  }
  
  my $ownership_type_select_fn = make_select_from_db_table($Osbb, 'Osbb', 'ownership_types', 'OWNERSHIP_TYPE', {
      
      REQUIRED => 1,
    });
  
  $html->tpl_show(
    _include('osbb_user', 'Osbb'),
    {
      OWNERSHIP_TYPE_SELECT => $ownership_type_select_fn->(),
      %TEMPLATE_ARGS,
      %FORM,
      SUBMIT_BTN_ACTION     => ($FORM{chg}) ? 'change' : 'add',
      SUBMIT_BTN_NAME       => ($FORM{chg}) ? $lang{CHANGE} : $lang{ADD},
    }
  );
  
  return 1;
}

#**********************************************************
=head2 osbb_user_list($attr)

=cut
#**********************************************************
sub osbb_users_list {
  
  if ( $FORM{search} ) {
    $html->message('warn', $lang{ERROR}, $lang{NOT_IMPLEMENTED});
  }
  elsif ( $FORM{import} ) {
    return &_osbb_users_import;
  }
  
  if ( $admin->{DOMAIN_ID} ) {
    delete $LIST_PARAMS{DOMAIN_ID};
  }
  
  if ( $FORM{add} ) {
    _osbb_user_create(\%FORM);
  }
  
  if ( $FORM{chg} ) {
    $User->pi_change({ UID => $FORM{usr}, %FORM });
    $Osbb->user_change({ UID => $FORM{usr}, %FORM });
  }
  
  my $builds_list = $Address->build_list({ COLS_NAME => 1, PAGE_ROWS => 1 });
  _error_show($Address);
  
  my $location_id = $FORM{LOCATION_ID} || $builds_list->[0]->{id};
  
  my $nav = $html->form_main({
    CONTENT => osbb_simple_build_select(\%FORM),
    HIDDEN  => { index => $index },
    class   => 'navbar-form navbar-right',
  });
  func_menu({ $lang{NAME} => $nav }, {}, {});
  
  if ( !$location_id ) {
    $html->message('err', "$lang{NO} $lang{BUILDS}", $html->button("$lang{ADD} $lang{ADDRESS}", 'index=91'));
    return 0;
  }
  
  if ( $FORM{adding} ) {
    $html->tpl_show(_include('osbb_form_user_add', 'Osbb'), { %FORM, BUTTON => $lang{ADD}, ACTION => 'add' });
  }
  
  if ( $FORM{change} ) {
    my $user_info = $Osbb->user_list({
      UID          => $FORM{usr},
      FIO          => '_SHOW',
      ADDRESS_FLAT => '_SHOW',
      PEOPLE_COUNT => '_SHOW',
      LIVING_AREA  => '_SHOW',
      PASSWORD     => '_SHOW',
      COLS_NAME    => 1,
      COLS_UPPER   => 1,
    });
    
    $html->tpl_show(_include('osbb_form_user_add', 'Osbb'),
      { %FORM, %{$user_info->[0]}, BUTTON => $lang{CHANGE_}, ACTION => 'chg' });
  }
  
  my $users_list = $Osbb->user_list({
    LOCATION_ID  => $location_id,
    FIO          => '_SHOW',
    ADDRESS_FLAT => '_SHOW',
    UID          => '_SHOW',
    PEOPLE_COUNT => '_SHOW',
    LIVING_AREA  => '_SHOW',
    
    COLS_NAME    => 1,
    COLS_UPPER   => 1,
    PAGE_ROWS    => 10000,
    SORT         => 1,
    DESC         => 1
  });
  _error_show($Osbb);
  
  my $table = $html->table({
    width   => '100%',
    caption => $lang{HOUSING},
    border  => 1,
    title   => [ $lang{ADDRESS_FLAT}, $lang{FIO}, $lang{LIVING_AREA}, $lang{PEOPLE_COUNT} ],
    ID      => 'HOUSING',
    MENU    => "$lang{ADD}:index=$index&LOCATION_ID=$location_id&adding=1:btn bg-olive margin;"
      . "$lang{IMPORT}:index=$index&LOCATION_ID=$location_id&import=1:btn bg-olive margin;"
      . "$lang{SEARCH}:index=$index&LOCATION_ID=$location_id&search_form=1:btn bg-purple margin",
  });
  
  foreach my $user_line ( sort {
    my ($anum, $bnum);
    $a->{address_flat} =~ /^(\d+)*/;
    $anum = $1 || 0;
    $b->{address_flat} =~ /^(\d+)*/;
    $bnum = $1 || 0;
    $anum <=> $bnum;
  } @{$users_list} ) {
    my $user_button = $html->button($user_line->{fio} || "(null)",
      "index=$index&LOCATION_ID=$location_id&usr=$user_line->{uid}&change=1", {});
    $table->addrow($user_line->{address_flat}, $user_button, $user_line->{LIVING_AREA}, $user_line->{PEOPLE_COUNT});
  }
  
  print $table->show();
  
  # result_former({
  #   INPUT_DATA      => $Osbb,
  #   FUNCTION        => 'user_list',
  #   BASE_FIELDS     => 0,
  #   DEFAULT_FIELDS  => 'ADDRESS_FLAT,FIO,LIVING_SPACE,DEPOSIT',
  #   FUNCTION_FIELDS => 'change,form_payments',
  #   MULTISELECT     => ($permissions{0}{7}) ? 'IDS:uid:internet_users_list' : '',
  #   EXT_TITLES      => {
  #     living_space   => $lang{LIVING_SPACE},
  #     utility_room   => $lang{UTILITY_ROOM},
  #     apartment_area => $lang{TOTAL_SPACE},
  #     commercial     => $lang{COMMERCIAL}
  #   },
  #   SELECT_VALUE    => {
  #     commercial    => {
  #       0 => '',
  #       1 => $lang{COMMERCIAL}
  #     }
  #   },
  #   TABLE           => {
  #     width      => '100%',
  #     caption    => "$lang{OSBB} - $lang{HOUSING}",
  #     qs         => $pages_qs,
  #     ID         => 'OSBB_USERS_LIST',
  #     #header     => $status_bar,
  #     SELECT_ALL => ($permissions{0}{7}) ? "internet_users_list:IDS:$lang{SELECT_ALL}" : undef,
  #     MENU       =>
  #         "$lang{ADD}:index=$index&adding=1:btn bg-olive margin;"
  #       . "$lang{IMPORT}:index=$index&import=1:btn bg-olive margin;"
  #       . "$lang{SEARCH}:index=$index&search_form=1:btn bg-purple margin"
  #   },
  #   MAKE_ROWS    => 1,
  #   SEARCH_FORMER=> 1,
  #   MODULE       => 'Osbb',
  #   TOTAL        => 1,
  # });
  
  return 1;
}

#**********************************************************
=head2 osbb_user_info ()
  main osbb user page

=cut
#**********************************************************
sub osbb_user_info {
  _under_construction();
  return 1;
}

#**********************************************************
=head2 osbb_user_finance ()
  finance osbb user page

=cut
#**********************************************************
sub osbb_user_finance {
  _under_construction();
  return 1;
}

#**********************************************************
=head2 osbb_registration($attr)

=cut
#**********************************************************
sub osbb_registration {
  my ($attr) = @_;
  
  if ( $attr->{user_registration} ) {
    osbb_user_registration($attr);
    return 1;
  }
  
  if ( $FORM{reg} ) {
    if ( $FORM{EMAIL} !~ /^(([^<>()[\]\\.,;:\s\@\"]+(\.[^<>()[\]\\.,;:\s\@\"]+)*)|(\".+\"))\@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/ ) {
      $Osbb->{MESSAGE} = $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_EMAIL}");
    }
    elsif ( $conf{REGISTRATION_CHECK_PHONE}
      && (!$FORM{PHONE} || ($conf{PHONE_FORMAT} && $FORM{PHONE} !~ /$conf{PHONE_FORMAT}/)) ) {
      $Osbb->{MESSAGE} = $html->message('err', $lang{ERROR},
        $lang{ERR_WRONG_PHONE} . (($conf{PHONE_FORMAT}) ? ' ' . human_exp($conf{PHONE_FORMAT}) : q{}));
    }
    elsif ( !$FORM{ACCEPT_RULES} ) {
      $html->message('err', $lang{ERROR}, "$lang{ERR_ACCEPT_RULES} -");
    }
    else {
      if ( form_purchase_module({
        HEADER          => $user->{UID} || $html->{show_header},
        MODULE          => 'Multidoms',
        REQUIRE_VERSION => 1.01
      }) ) {
        exit;
      }
      
      my $Multidoms = Multidoms->new($db, $admin, \%conf);
      $Multidoms->multidoms_domain_add({ NAME => "$FORM{PHONE}" });
      if ( $Multidoms->{errno} ) {
        $html->message('err', $lang{ERROR}, "$FORM{PHONE} $lang{EXIST}");
      }
      else {
        $admin->add({ %FORM,
          ID          => $FORM{PHONE},
          NAME        => $FORM{FIO},
          A_LOGIN     => $FORM{PHONE},
          DOMAIN_ID   => $Multidoms->{INSERT_ID},
          WEB_OPTIONS =>
          "language=$html->{language};QUICK_REPORTS=Osbb:osbb_quick_menu, Osbb:osbb_finance_report, Osbb:osbb_tarifs_report;"
        });
        
        return 0 if ( _error_show($admin) );
        
        my $password = mk_unique_value($conf{PASSWD_LENGTH} || 8, { EXTRA_RULES => '0:0' });
        $admin->password($password, \%conf);
        
        if ( !$admin->{errno} ) {
          $Multidoms->admin_change({
            AID       => $admin->{AID},
            DOMAIN_ID => $Multidoms->{INSERT_ID},
          });
          
          $admin->set_permissions({
              0 => { 0 => 1, 1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1 },
              1 => { 0 => 1, 1 => 1, 2 => 1, 3 => 1, 4 => 1 },
              2 => { 0 => 1, 1 => 1, 2 => 1, 3 => 1 },
              3 => { 0 => 1, 1 => 1, 2 => 1, 3 => 1 },
              4 => { 0 => 1, 1 => 1, 2 => 1, 3 => 1 },
              6 => { 0 => 1 },
              7 => { 0 => 1 },
              8 => { 0 => 1 },
            }, {});
          
          $Address = Address->new($db, $admin, \%conf);
          $Address->district_add({
            DOMAIN_ID => $Multidoms->{INSERT_ID},
            NAME      => $FORM{PHONE},
            CITY      => $FORM{CITY},
          });
          
          $Address->street_add({
            DISTRICT_ID => $Address->{INSERT_ID},
            NAME        => $FORM{ADDRESS_STREET},
          });
          
          $Address->build_add({
            STREET_ID => $Address->{INSERT_ID},
            NUMBER    => $FORM{ADDRESS_BUILD},
          });
          
          _error_show($Address);
          
          if ( $Multidoms->{errno} ) {
            $html->message('err', $lang{ERROR}, "Помилка Multidoms");
          }
          elsif ( $Address->{errno} ) {
            $html->message('err', $lang{ERROR}, "Помилка Address");
          }
          else {
            my $message = $html->tpl_show(_include('osbb_reg_complete_mail', 'Osbb'),
              { %{$Osbb}, %FORM, PASSWORD => "$password" }, { OUTPUT2RETURN => 1 });
            
            # TODO: check mail was sent
            sendmail("$conf{ADMIN_MAIL}", "$FORM{EMAIL}", "$lang{REGISTRATION}", "$message", "$conf{MAIL_CHARSET}", '');
            # TODO: localize
            $html->message('info', "Реєстрація успішна",
              "На пошту ($FORM{EMAIL}) вам надіслано листа з інформацією про наступні дії.");
            _copy_template($Multidoms->{INSERT_ID});
            my $login_url = $SELF_URL;
            $login_url =~ s/registration.cgi/admin\//;
            print "Location: $login_url\n\n";
            return 1;
          }
        }
      }
      
      if ( !_error_show($admin) ) {
        _error_show($Multidoms);
      }
    }
  }
  
  $attr->{OSBB_RULES} = '';
  my $content = file_op({
    FILENAME => 'rules.txt',
    PATH     => $conf{base_dir} . "/Abills/modules/Osbb",
    ROWS     => 1
  });
  foreach ( @{$content} ) {
    $attr->{OSBB_RULES} .= $_ . "\n";
  }
  
  $html->tpl_show(_include('osbb_registration', 'Osbb'), { %{$Osbb}, %{$attr}, %FORM }, { ID => 'OSBB_REGISTRATION' });
  
  return 1;
}

#**********************************************************
=head2 osbb_user_registration($attr)

=cut
#**********************************************************
sub osbb_user_registration {
  my ($attr) = @_;
  
  if ( $FORM{reg} || $attr->{USER_ID} ) {
    my $login = $FORM{FIO} || $attr->{FIO} || $attr->{USER_ID};
    if ( !$login ) {
      $Osbb->{MESSAGE} = $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_NAME}");
      return 0;
    }
    $login =~ s/\s/_/g;
    $login = lc $login;
    
    $admin->{DOMAIN_ID} = 1;
    $User->add({
      CREATE_BILL => 1,
      LOGIN       => $login,
      %{$attr},
    });
    _error_show($User);
    
    my $uid = $User->{INSERT_ID};
    
    if ( $User->{errno} ) {
      $html->message('err', "$lang{ERROR}", "Ошибка при создании пользователя $login");
      return 0;
    }
    
    $User->pi_add({ %{$attr}, UID => $uid });
    _error_show($User);
    
    $Osbb->user_add({ %{$attr}, UID => $uid });
    _error_show($Osbb);
    
    if ( $Osbb->{errno} && $User->{errno} ) {
      $html->message('err', "$lang{ERROR}");
    }
    else {
      $html->message('info', "$lang{SUCCESS}", "Пользователь $login успешно зарегистрирован.");
      print "Location: $attr->{login_url}\n\n";
      return 1;
    }
  }
  
  $html->tpl_show(_include('osbb_user_registration', 'Osbb'), { %{$Osbb}, %{$attr}, %FORM },
    { ID => 'OSBB_REGISTRATION' });
  
  return 1;
}

#**********************************************************
=head2 osbb_simple_build_select()

=cut
#**********************************************************
sub osbb_simple_build_select {
  my ($attr) = @_;
  
  my $builds_list = $Address->build_list({
    NUMBER        => '_SHOW',
    DISTRICT_ID   => '_SHOW',
    DISTRICT_NAME => '_SHOW',
    STREET_ID     => '_SHOW',
    STREET_NAME   => '_SHOW',
    COLS_NAME     => 1,
    PAGE_ROWS     => 10000
  });
  
  if ( _error_show($Address) ) {
    $html->message('err', $lang{ERROR}, 'Error retrieving builds');
    return '';
  }
  
  my $result = '';
  
  # If no builds, show button
  if ( !$builds_list || ref $builds_list ne 'ARRAY' || !scalar(@{$builds_list}) ) {
    my $add_btn = $html->button(
      " $lang{ADD} $lang{ADDRESS_BUILD}",
      'adding=1&index=' . get_function_index('osbb_form_address'),
      {
        class    => 'btn btn-warning',
        ADD_ICON => 'glyphicon glyphicon-plus'
        
      }
    );
    # Form select
    $result = $add_btn;
  }
  
  # If 1 build show text and button
  elsif ( scalar(@{$builds_list}) == 1 ) {
    my $build = $builds_list->[0];
    
    $FORM{LOCATION_ID} = $build->{id};
    
    my $add_btn = $html->button(
      "$lang{ADD} $lang{ADDRESS_BUILD}",
      'adding=1&index=' . get_function_index('osbb_form_address'),
      {
        class => 'btn btn-xs btn-primary',
        ICON  => 'glyphicon glyphicon-plus'
      }
    );
    
    $result = $html->element('div', "$build->{street_name}, $build->{number} " . $add_btn, {
        class => 'text-bold'
      });
  }
  
  # If has lot of builds, show select with buttons
  elsif ( $builds_list && ref $builds_list eq 'ARRAY' && scalar(@{$builds_list}) > 1 ) {
    my $address_index = get_function_index('osbb_form_address');
    my $add_btn = $html->button(
      "$lang{ADD} $lang{ADDRESS_BUILD}",
      "adding=1&index=$address_index",
      {
        ICON => 'glyphicon glyphicon-plus'
      }
    );
    
    my @full_name_builds_list = map {
      {
        id   => $_->{id},
        name => join (', ', ($_->{street_name} || q{}), ($_->{number} || q{}))
      }
    } @{$builds_list};
    
    $result = $html->form_select('LOCATION_ID', {
        SELECTED   => $attr->{LOCATION_ID} || $FORM{LOCATION_ID} || '',
        SEL_LIST   => \@full_name_builds_list,
        NO_ID      => 1,
        MAIN_MENU  => "?index=$address_index&LOCATION_ID=" . ($attr->{LOCATION_ID} || $FORM{LOCATION_ID} || ''),
        EXT_BUTTON => $add_btn,
        AUTOSUBMIT => ($attr->{AUTO_SUBMIT} || $attr->{AUTOSUBMIT})
          ? 'form'
          : 0,
      });
  }
  
  return $result;
}

#**********************************************************
=head2 _osbb_payments_type_select()

=cut
#**********************************************************
sub _osbb_payments_type_select {
  
  return $html->form_select('METHOD', {
      SELECTED     => $FORM{METHOD} || '',
      SEL_ARRAY    => [ $lang{CASH}, $lang{BANK}, $lang{COMPENSATION}, $lang{CORRECTION} ],
      ARRAY_NUM_ID => 1,
      NO_ID        => 1,
    });
  
}

#**********************************************************
=head2 _osbb_user_select()

=cut
#**********************************************************
sub _osbb_user_select {
  
  my $users_list = $User->list({
    LOCATION_ID  => $FORM{LOCATION_ID},
    FIO          => '_SHOW',
    ADDRESS_FLAT => '_SHOW',
    UID          => '_SHOW',
    COLS_NAME    => 1,
    PAGE_ROWS    => 10000
  });
  _error_show($User);
  
  @{$users_list} = sort {
    my ($anum, $bnum);
    $a->{address_flat} =~ /^(\d+)*/;
    $anum = $1 || 0;
    $b->{address_flat} =~ /^(\d+)*/;
    $bnum = $1 || 0;
    $anum <=> $bnum;
  } @{$users_list};
  
  my @full_name_users_list = map {
    {
      id   => $_->{uid},
      name => "$_->{address_flat}, $_->{fio}"
    }
  } @{$users_list};
  
  return $html->form_select('usr', {
      SELECTED    => $FORM{usr} || '',
      SEL_LIST    => \@full_name_users_list,
      NO_ID       => 1,
      SEL_OPTIONS => { '' => '' },
    });
}


#**********************************************************
=head2 _osbb_user_create()

=cut
#**********************************************************
sub _osbb_user_create {
  my $user_hash = shift || \%FORM;
  
  my %PARAMS = %{$user_hash};
  
  if ( !$PARAMS{LOCATION_ID} ) {
    $html->message('err', 'No LOCATION_ID');
    return 0;
  }
  if ( !$PARAMS{ADDRESS_FLAT} ) {
    $html->message('err', 'No ADDRESS_FLAT');
    return 0;
  }
  
  my $login = "$PARAMS{LOCATION_ID}_$PARAMS{ADDRESS_FLAT}";
  $login = lc $login;
  $login =~ tr/абвгдежзіийклмнопрстуфхцчшщыєэюя/abvgdegziijklmnoprstufhchscyeeyy/;
  
  $User->add({
    CREATE_BILL => 1,
    LOGIN       => $login,
    %PARAMS,
  });
  _error_show($User);
  
  my $uid = $User->{INSERT_ID};
  
  if ( $User->{errno} ) {
    $html->message('err', "$lang{ERROR}");
    return 0;
  }
  
  $User->pi_add({ %PARAMS, UID => $uid });
  _error_show($User);
  
  $Osbb->user_add({ %PARAMS, UID => $uid });
  _error_show($Osbb);
  
  if ( $Osbb->{errno} && $User->{errno} ) {
    $html->message('err', "$lang{ERROR}");
  }
  else {
    $html->message('info', "$lang{SUCCESS}", "$lang{ADDED}");
  }
  
  return $uid;
}

#**********************************************************
=head2 osbb_form_address()

=cut
#**********************************************************
sub osbb_form_address {
  my $params = ();
  
  my $builds_list = $Address->build_list({
    STREET_NAME => '_SHOW',
    CITY        => '_SHOW',
    DISTRICT_ID => '_SHOW',
    
    COLS_NAME   => 1,
    COLS_UPPER  => 1,
  });
  _error_show($Address);
  
  if ( $FORM{adding} ) {
    $params->{BUTTON} = $lang{ADD};
    $params->{ACTION} = 'add';
    $params->{DISABLED} = 'readonly';
    $params->{CITY} = $builds_list->[0]->{CITY};
    $html->tpl_show(_include('osbb_form_address', 'Osbb'), { %{$params} });
  }
  elsif ( $FORM{change} ) {
    $params->{BUTTON} = $lang{CHANGE_};
    $params->{ACTION} = 'chg';
    $params->{build_id} = $FORM{change};
    my $build = $Address->build_list({
      LOCATION_ID => $FORM{change},
      STREET_NAME => '_SHOW',
      DISTRICT_ID => '_SHOW',
      CITY        => '_SHOW',
      
      COLS_NAME   => 1,
      COLS_UPPER  => 1,
    });
    _error_show($Address);
    
    $html->tpl_show(_include('osbb_form_address', 'Osbb'), { %{$params}, %{$build->[0]} });
  }
  elsif ( $FORM{add} ) {
    $Address->street_list({ STREET_NAME => '_SHOW', LIST2HASH => 'street_name,street_id' });
    my $street_hash = $Address->{list_hash};
    $Address->street_add({ NAME => $FORM{STREET_NAME}, DISTRICT_ID =>
      $builds_list->[0]->{DISTRICT_ID} }) if ( !defined($street_hash->{$FORM{STREET_NAME}}) );
    $Address->build_add({ ADD_ADDRESS_BUILD => $FORM{NUMBER}, STREET_ID =>
      $street_hash->{$FORM{STREET_NAME}} || $Address->{INSERT_ID} });
  }
  elsif ( $FORM{chg} ) {
    my $changed_build_info = $Address->build_list({
      LOCATION_ID => $FORM{build_id},
      NUMBER      => '_SHOW',
      STREET_ID   => '_SHOW',
      STREET_NAME => '_SHOW',
      DISTRICT_ID => '_SHOW',
      CITY        => '_SHOW',
      
      COLS_NAME   => 1,
    });
    $Address->street_change({ ID => $changed_build_info->[0]->{street_id}, NAME =>
      $FORM{STREET_NAME} }) if ( $changed_build_info->[0]->{street_name} ne $FORM{STREET_NAME} );
    $Address->build_change({ ID => $changed_build_info->[0]->{location_id}, NUMBER =>
      $FORM{NUMBER} }) if ( $changed_build_info->[0]->{number} ne $FORM{NUMBER} );
    $Address->district_change({ ID => $changed_build_info->[0]->{district_id}, CITY =>
      $FORM{CITY} }) if ( $changed_build_info->[0]->{city} ne $FORM{CITY} );
    _error_show($Address);
  }
  
  $builds_list = $Address->build_list({
    STREET_NAME => '_SHOW',
    CITY        => '_SHOW',
    DISTRICT_ID => '_SHOW',
    
    COLS_NAME   => 1,
    COLS_UPPER  => 1,
  });
  
  my $table = $html->table({
    width               => '100%',
    caption             => $lang{ADDRESS},
    border              => 1,
    title               => [ $lang{CITY}, $lang{ADDRESS_STREET}, $lang{ADDRESS_BUILD} ],
    ID                  => 'ADDRESS',
    MENU                => "$lang{ADD}:index=$index&adding=1:btn bg-olive margin;",
    HAS_FUNCTION_FIELDS => 1,
  });
  
  foreach my $build_line ( @{$builds_list} ) {
    my $change_button = $html->button($lang{CHANGE_}, "index=$index&change=$build_line->{id}", {});
    $table->addrow($build_line->{CITY}, $build_line->{STREET_NAME}, $build_line->{NUMBER}, $change_button);
  }
  
  print $table->show();
  
  return 1;
}

#**********************************************************
=head2 _copy_template(DOMAIN_ID)

=cut
#**********************************************************
sub _copy_template {
  my ($domain) = @_;
  
  print cmd("mkdir /usr/abills/Abills/templates/$domain/");
  print cmd("cp /usr/abills/Abills/templates/0/* /usr/abills/Abills/templates/$domain/");
  
  return 1;
}

#**********************************************************
=head2 _under_construction ()

=cut
#**********************************************************
sub _under_construction {
  $html->message('info', "$lang{UNDER_CONSTRUCTION}");
}

#**********************************************************
=head2 osbb_registration_wizard()

=cut
#**********************************************************
sub osbb_registration_wizard {
  
  if ( my $module_load_error = load_pmodule("JSON", { SHOW_RETURN => 1 }) ) {
    print $module_load_error;
    return 0;
  }
  require JSON;
  JSON->import();
  
  my $json = JSON->new->utf8(0);
  
  my @steps = (
    {
      name  => 'Створення ініціативної групи',
      icon  => 'user',
      items => [ { name => 'Створити ініціативну групу' } ],
      hint  => q{<p>Щоб створити ОСББ, на першому етапі необхідно сформувати ініціативну групу,
       мінімальна чисельність якої - 3 особи. До складу ініціативної групи мають право ввійти лише власники квартир або
       нежилих приміщень у багатоквартирному будинку, тож квартиронаймачі й орендарі не можуть бути ініціаторами
       створення ОСББ. Виняток - якщо власник орендованої квартири видав їм відповідну довіреність.</p>
       <p>Основною метою ініціативної групи є скликання установчих зборів, а також підготовча роз’яснювальна робота,
       підготовка проектів документів для розгляду на установчих зборах, запит у Держреєстр прав тощо.</p>
       <p>Для цього ініціативна група повинна призначити дату, час і конкретне місце проведення установчих зборів.
       Закон передбачає, що час і місце проведення мають бути зручними для більшості можливих учасників зборів.</p>
      }
    },
    {
      name  => 'Формування реєстру співвласників',
      icon  => 'file',
      hint  => q{
          <h4>Дані, які потрібно зібрати для кожного жильця</h4>
          <ul>
            <li>Номер квартири або дані нежитлового приміщення</li>
            <li>Прізвище, ім’я, по-батькові власника приміщення або уповноваженої ним особи</li>
            <li>Розмір загальної площі житлового або нежитлового приміщення (або його частини)</li>
            <li>Загальна площа житлових та нежитлових приміщень у будинку</li>
          </ul>
        },
      items => [
        { name => 'Отримати інформацію про власників з Держреєстру прав' },
        { name =>
          'Встановити власників квартир, яких немає у відповіді з Держреєстру самостійно шляхом поквартирного обходу' },
      
      ]
    },
    {
      name  => 'Підготовка проекту Статуту ОСББ',
      icon  => 'folder-open',
      hint  => q{
      <p>Статут ОСББ має відповідати вимогам, передбаченим Законом № 2866. Статут є установчим документом ОСББ. Статут об’єднання складається відповідно до типового статуту, який затверджується центральним органом виконавчої влади, що забезпечує формування державної житлової політики й політики у сфері житлово-комунального господарства.</p>

<p>Нині лишається чинним Типовий статут об’єднання співвласників багатоквартирного будинку, затверджений наказом Державного комітету України з питань житлово-комунального господарства від 27.08.2003 р. № 141. Однак відповідно до «Прикінцевих положень» Закону № 417 статути ОСББ, затверджені до 1 липня 2015 року, діють у частині, що не суперечить Закону № 417. На практиці держреєстратори часто не приймають статути, підготовлені за старим типовим зразком. Трапляється 2 ситуації — держреєстратори або відправляють ініціаторів чекати на затвердження нового типового статуту, або приймають до реєстрації «доопрацьований» статут, що не суперечить вимогам Закону № 417.</p>

<p>Тому згаданий Типовий статут використовувати в незміненому вигляді точно не варто. Загалом під час підготовки статуту можливі 2 варіанти.</p>

<p>Перший полягає в тому, щоб узяти за основу типовий статут. При цьому внести до нього низку змін із метою приведення у відповідність до чинного законодавства: вилучити всі застарілі положення про членство в ОСББ, його умови, порядок набуття та виключення тощо, скоригувати норми щодо складу майна ОСББ, зокрема, норми щодо складу майна співвласників з урахуванням чинного законодавства, доповнити відповідні розділи стосовно прав й обов’язків співвласників, доопрацювати норми щодо керівних органів ОСББ тощо.</p>

<p>Другий варіант складніший — розробити новий статут, що ми й рекомендуємо зробити. При цьому до підготовки статуту краще залучити фахівців, оскільки він має враховувати специфіку будинку, його мешканців, бути «життєздатним» і розрахованим на реальне застосування під час вирішення практичних ситуацій.</p>

<p>Закон визначає перелік даних, які обов’язково мають зазначатися в статуті:</p>
<ul>
<li>назва та місцезнаходження об’єднання;</li>
<li>мета створення, завдання та предмет діяльності об’єднання. ОСББ відповідно до закону створюється для забезпечення й захисту прав співвласників і дотримання їхніх обов’язків, належного утримання й використання спільного майна, забезпечення своєчасного надходження коштів для сплати всіх платежів, передбачених законодавством і статутними документами.</li>
<li>статутні органи об’єднання, їхні повноваження та порядок формування;</li>
<li>порядок скликання й проведення загальних зборів;</li>
<li>періодичність проведення зборів;</li>
<li>порядок голосування на зборах і прийняття рішень на них;</li>
<li>перелік питань, для вирішення яких потрібна кваліфікована більшість голосів;</li>
<li>джерела фінансування, порядок використання майна та коштів об’єднання;</li>
<li>порядок прийняття кошторису, створення та використання фондів об’єднання, включаючи резервні, а також порядок оплати спільних витрат;</li>
<li>перелік питань, які можуть вирішуватися зборами представників;</li>
<li>права й обов’язки співвласників;</li>
<li>відповідальність за порушення статуту й рішень статутних органів;</li>
<li>порядок унесення змін до статуту;</li>
<li>підстави й порядок ліквідації, реорганізації (злиття, поділу) об’єднання та вирішення майнових питань, пов’язаних із цим.</li>
</ul>

<strong>Звертаємо увагу на те, що відсутність хоча б однієї з наведених вище умов у статуті може призвести до відмови в державній реєстрації ОСББ.</strong>
<br/>
<p>Статут може містити також інші положення, що є істотними для діяльності об’єднання та не суперечать вимогам законодавства.</p>
      },
      items => [
        { name => 'Розглянути типовий статут ОСББ' },
        { name => 'Вирішити, який варіант підготовки статуту буде використаний' },
        { name =>
          'Внести зміни до типового статуту або звернутись до фахівців для отримання попереднього варіанту статуту' },
      ]
    },
    {
      name  => 'Скликання установчих зборів',
      icon  => 'comment',
      hint  => q{
      <p>Повідомлення про проведення установчих зборів має бути оформлено в письмовій формі та містити порядок денний.</p>
        Законом передбачено 2 способи передання повідомлення співвласнику про установчі збори:
         <ol>
         <li>вручити «у руки» під розписку.</li>
         <li>поштовим відправленням (рекомендованим листом).</li>
         </ol>
         <p>Більшість повідомлень уручають особисто, а тим особам, хто має інше місце проживання чи, наприклад, відмовляється ставити підпис про отримання повідомлення — надсилають рекомендованим листом.</p>
         <p>Зміна переліку питань порядку денного після письмового повідомлення співвласників про установчі збори також може призвести до оскарження рішень таких зборів і скасування державної реєстрації ОСББ. Не рекомендуємо включати до порядку денного установчих зборів питання невизначеного характеру, наприклад, «організаційні питання», «інше», «різне», а натомість чітко зазначити всі питання, які планується розглянути.</p>
      },
      items => [
        { name => 'Сформувати порядок денний установчих зборів' },
        { name => 'Призначити дату проведення установчих зборів' },
        { name =>
          'Проінформувати кожного співвласника не менш ніж за 14 днів до визначеної дати' }
      ]
    },
    {
      name  => 'Проведення установчих зборів',
      icon  => 'briefcase',
      hint  => q{
      <p>Засідання зборів веде голова, який обирається більшістю голосів присутніх співвласників або їх представників</p>
      <p>Рішення на установчих зборах приймається шляхом поіменного голосування. Кожен співвласник (його представник) під час голосування має кількість голосів, пропорційну до частки загальної площі квартири чи нежитлового приміщення співвласника в загальній площі всіх квартир і нежитлових приміщень, розташованих у багатоквартирному будинку.</p>
      <p>Рішення вважається прийнятим, якщо за нього проголосувало більше половини загальної кількості всіх співвласників. Рішення оформлюється особистим підписом кожного, хто проголосував, із зазначенням результату голосування («за» або «проти»).</p>
      <p>Усі результати опитування фіксуються в протоколі зборів. Голоси, подані в результаті проведення процедури письмового опитування, ураховуються під час прийняття рішення та мають таку саму юридичну силу, як і голоси, подані безпосередньо на установчих зборах. Листки письмового опитування співвласників пронумеровуються, прошнуровуються та додаються до відповідного протоколу зборів.</p>
      },
      items => [
        { name => 'Обрати лічильну комісію' },
        { name => 'Провести голосування по питанням зазначеним в порядку денному' },
        { name =>
          'Провести письмове опитування співвласників, які не голосували на установчих зборах (протягом 15 календарних днів)' },
        { name => 'Зафіксувати результати опитування в протоколі зборів' },
      ]
    },
    {
      name  => 'Державна реєстрація ОСББ',
      icon  => 'ok',
      items => [
        { name => 'Подати документи державному реєстратору' }
      ],
      hint  => q{
      <p>Відповідно до Закону України «Про державну реєстрацію юридичних осіб та фізичних осіб — підприємців», для проведення державної реєстрації ОСББ як юридичної особи вповноваженій установчими зборами особі необхідно подати державному реєстратору такі документи:</p>
<ul>
<li> заповнену реєстраційну картку на проведення державної реєстрації юридичної особи;</li>
<li> примірник оригіналу (ксерокопію, нотаріально засвідчену копію) рішення про створення ОСББ і затвердження його статуту. Цим документом є протокол установчих зборів;</li>
<li>два примірники Статуту ОСББ.</li>
</ul>
<p>Зауважимо: законодавством не передбачено подання державному реєстратору списку співвласників об’єднання. Окрім того, підтверджувати правовстановлюючими документами наявність права власності на квартири та нежитлові приміщення співвласників під час державної реєстрації ОСББ не вимагається. Відповідальність за достовірність відомостей, наведених у поданих документах, покладається на власників житлових (нежитлових) приміщень і заявника.</p>
<p>Указані документи можуть подаватися державному реєстратору як особисто, так і шляхом їх надсилання поштовим відправленням з описом вкладення.</p>
<p>Державному реєстратору для проведення державної реєстрації забороняється вимагати будь-які додаткові документи.</p>
      }
    }
  );
  
  my $steps_json = $json->encode(\@steps);
  
  # We are storing progress insode a web browser storage,
  #  so if steps have been changed, should flush cache
  my $steps_hash = unpack("%32W*", $steps_json) % 65535 . length($steps_json);
  
  $steps_json =~ s/\\n//gm;
  $html->tpl_show(_include('osbb_create_wizard', 'Osbb'),
    {
      STEPS_HASH  => $steps_hash,
      STEPS_COUNT => scalar(@steps),
      STEPS       => $steps_json
    }
  );
  
  return 1;
}

#**********************************************************
=head2 osbb_osbb_reg_wizard_sp()

=cut
#**********************************************************
sub osbb_osbb_reg_wizard_sp {
  
  my $reg_index = get_function_index('osbb_registration_wizard');
  my $reg_btn = $html->button("$lang{REGISTRATION} $lang{OSBB}", "index=$reg_index", {
      class => 'btn btn-lg btn-success'
    });
  
  my $table = $html->table({
    width        => '100%',
    titles_plain => [ '-' ],
    caption      => "$lang{HELP} $lang{OSBB}",
    ID           => 'OSBB_HELP',
  });
  
  $table->addrow($html->element('div', $reg_btn, { class => 'text-center' }));
  
  return $table->show();
}


1;
